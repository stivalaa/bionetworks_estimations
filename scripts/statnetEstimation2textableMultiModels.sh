#!/bin/sh
#
# File:    statnetEstimation2textableMultiModels.sh
# Author:  Alex Stivala
# Created: Februrary 2017
#
# Read output of statnet with the estimate,
# estimated std. error and p-value computed from Statnet results
# and build LaTeX table for multiple different models
#
# This version works with output from main.method="Stepping" in ergm 4.1.2
# (September 2021)
#
# Usage: statnetEstimation2textableMultiModels.sh estimationoutputfile_model1 estimationoutputfile_model2 ...
#
# E.g.:
#   statnetEstimation2texttableMultiModels  estimation.out model2/estimation.out
#
# Output is to stdout
#
# Uses various GNU utils options on echo, etc.
#
# This version uses dcolumn package to format values, must
# \usepackage{dcolumn} in document, and also must
# \usepackage{floatrow} for the \floatfoot used for table note.
#


if [ $# -lt 1 ]; then
    echo "usage: $0 estimation1.out estimation2.out ..." >&2
    exit 1
fi

num_models=`expr $#`

statnet_tmpfile=`mktemp`

echo "% Generated by: $0 $*"
echo "% At: " `date`
echo "% On: " `uname -a`
# https://tex.stackexchange.com/questions/180001/siunitx-significant-stars-far-away
# no longer using siuntix as cannot get uncertainty to work, seems to not
# be able to handle decimals in uncerainty (?!?) wasted far too much
# time on this already..
#echo '\sisetup{table-space-text-post = ***}'
echo '% no longer using siunitx, cannot get uncertainty to work'
#echo "\\begin{tabular}{l*{${num_models}}{S[table-format=3.2(3.2),table-align-text-post=false]}}"
echo "\\begin{tabular}{l*{${num_models}}{D{)}{)}{11)3}}}"
echo '\hline'  
echo -n 'Effect '
i=1
while [ $i -le $num_models ]
do
    #don't put braces around text in dcolumn, only for siunitx: echo -n " & {Model ${i}}"
    echo -n " & \multicolumn{1}{c}{Model ${i}}" #use multicolumn instead for dcolumn
  i=`expr $i + 1`
done
echo '\\'
echo '\hline'  

model=1
for estimationresults in $*
do
  # get line number of start of last Estimation result
  lineno=`grep -n '.* Results:' $estimationresults| cut -d: -f1 | tail -1`

  # check for 'z value' column and remove: newer versions have this
  # but older did not, need to make consistent
  fgrep -q 'z value' ${estimationresults} >/dev/null
  if [ $? -eq 0 ]; then
      # write last estimation results to tmpfile (start at line no, end on '---'),
      # convert things like '< 0.001' to '<0.001'
      # Note lineno+2 now to skip header line:
      # Estimate Std. Error MCMC % z value Pr(>|z|)
      awk -vlineno=$lineno 'NR > lineno+2' $estimationresults | awk '{print $1,$2,$3,$4,$6,$7,$8}' | sed -n '0,/^---/p' | head -n-1 |  sed 's/_/\\_/g' | sed 's/< \([0][.][0-9]*\)/<\1/g' | sed 's/< *\([0-9]*\)e[-]\([0-9]*\)/<\1\\times10\^{-\2}/g'  |  sed "s/^/${model}\t/"  >>  ${statnet_tmpfile}
  else
      # write last estimation results to tmpfile (start at line no, end on '---'),
      # convert things like '< 0.001' to '<0.001' 
      awk -vlineno=$lineno 'NR > lineno+1' $estimationresults| sed -n '0,/^---/p' | head -n-1 |  sed 's/_/\\_/g' | sed 's/< \([0][.][0-9]*\)/<\1/g' | sed 's/< *\([0-9]*\)e[-]\([0-9]*\)/<\1\\times10\^{-\2}/g'  |  sed "s/^/${model}\t/"  >>  ${statnet_tmpfile}
  fi
  

  # also write AIC and BIC, parsed from e.g.:
  # AIC: 90.61    BIC: 98.14    (Smaller is better.)
  aic=`grep -w AIC ${estimationresults} | awk '{print $2}'`
  echo ${model} AIC ${aic} >> ${statnet_tmpfile}
  bic=`grep -w AIC ${estimationresults} | awk '{print $4}'`
  echo ${model} BIC ${bic} >> ${statnet_tmpfile}
  model=`expr $model + 1`
done


effectlist=`cat ${statnet_tmpfile} |  awk '{print $2}' | grep -vw AIC | grep -vw BIC | sort | uniq`

for effect in ${effectlist}
do
  model=1
  echo -n "${effect} "
  while [ $model -le $num_models ]; 
  do
    statnet_point=`fgrep  "${effect} " ${statnet_tmpfile} | awk -vmodel=$model '$1 == model {print $3}'`
    if [ "${statnet_point}" == "" ];  then
        #does not work with dcolumn, turns into vertical bar (?!?!):echo -n " & \\textemdash"
        echo -n " &  " # just use empty space instead for dcolumn
    else
      statnet_stderror=`fgrep  "${effect} " ${statnet_tmpfile} | awk -vmodel=$model '$1 == model {print $4}'`
      statnet_sig=`fgrep  "${effect} " ${statnet_tmpfile} | awk -vmodel=$model '$1 == model {if (NF == 7) {print $7} else {print ""}}'`
      # Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
      # do not use . for p<0.1 as we don't want that and it messes up table
      # so change to bullet instead
###      echo "XXX" "${effect}" "[${statnet_sig}]" >&2
      if [ "${statnet_sig}" == '.' ]; then
          #statnet_sig='^{\bullet}'
          statnet_sig='^{\boldsymbol{\cdot}}'
      else
          statnet_sig='^{'${statnet_sig}'}'
      fi
      printf " & %.3f \\; (%.3f) %s" ${statnet_point} ${statnet_stderror} "${statnet_sig}"
    fi
    model=`expr $model + 1`
  done
  echo '\\'
done

echo '\hline'

# now do AIC and BIC
model=1
echo -n "AIC "
while [ $model -le $num_models ]; 
do
    aic=`grep -w AIC ${statnet_tmpfile} | awk -vmodel=$model '$1 == model {print $3}'`
    printf " & %.2f" ${aic}
  model=`expr $model + 1`
done
echo '\\'

model=1
echo -n "BIC "
while [ $model -le $num_models ]; 
do
    bic=`grep -w BIC ${statnet_tmpfile} | awk -vmodel=$model '$1 == model {print $3}'`
    printf " & %.2f" ${bic}
  model=`expr $model + 1`
done
echo '\\'

echo '\hline'  
echo '\end{tabular}'
echo '\floatfoot{*** $p < 0.001$; ** $p < 0.01$; * $p < 0.05$; $^{\boldsymbol{\cdot}} p < 0.1$.}'

rm ${statnet_tmpfile}
